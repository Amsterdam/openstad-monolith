<template id="idea-template">
	<idea>
		<idea-image></idea-image>
		<idea-controls>
			<idea-votes-for-button id="idea-votes-for-button" onclick="doVote('yes')"></idea-votes-for-button>
			<idea-votes-against-button id="idea-votes-against-button" onclick="doVote('no')"></idea-votes-against-button>
		</idea-controls>
		<idea-title></idea-title>
		<idea-description></idea-description>
		<idea-counters></idea-counters>
	</idea>
</template>
<script>

 // web component definition
 class IdeaWidget extends HTMLElement {

	 constructor() {
		 super();

		 var template = document.getElementById('idea-template').content;
     var shadowRoot = this.attachShadow({mode: 'open'}).appendChild(template.cloneNode(true));

	 }

	 static get observedAttributes() {return ['data-id']; }

	 connectedCallback () {
		 // this.shadowRoot.querySelector('idea-controls').innerHTML = 'Knoppen'
		 let href = this.getAttribute('href') || '';
		 if (this.getAttribute('data-id')) {
			 this.fetch();
		 }
		 this.setAttribute('testValue', 'before')
	 }

	 fetch() {
		 let self = this;

		 // TODO: fetch is too modern, so change or polyfill
		 // TODO: CORS
		 let url = `{{apiUrl}}/api/site/2/idea/${self.getAttribute('data-id')}?includePosterImage=true&includeVoteCount=true&includeUserVote=true`
		 fetch(url, {
			 method: 'get',
			 headers: {
				 "Accept": "application/json"
			 },
		 })
			 .then(function (response) {
				 return response.json();
			 })
			 .then(function (json) {

				 self.shadowRoot.querySelector('idea').id = json.id;
				 self.shadowRoot.querySelector('idea-title').innerHTML = json.title;
				 self.shadowRoot.querySelector('idea-description').innerHTML = json.description;
				 self.shadowRoot.querySelector('idea-image').style = `background-image: url(${json.posterImageUrl})`;
				 self.shadowRoot.querySelector('idea-counters').innerHTML = `${json.yes}, ${json.no}, ${json.argCount}`;

				 self.shadowRoot.querySelector('idea-votes-for-button').innerHTML = `${json.yes}`;
				 self.shadowRoot.querySelector('idea-votes-for-button').className = json.userVote && json.userVote.opinion == 'yes' ? 'selected' : '';
				 self.shadowRoot.querySelector('idea-votes-against-button').innerHTML = `${json.no}`;
				 self.shadowRoot.querySelector('idea-votes-against-button').className = json.userVote && json.userVote.opinion == 'no' ? 'selected' : '';

				 self.setAttribute('testValue', 'after')
				 console.log('Request succeeded with JSON response', json);
			 })
			 .catch(function (error) {
				 console.log('Request failed', error);
			 });
	 }

	 attributeChangedCallback(name, oldValue, newValue) {
		 if (name == 'data-id') {
			 this.fetch();
		 }
		 console.log(name, oldValue, newValue)
	 }

 }
 customElements.define('idea-widget', IdeaWidget);


 // vote function
 function doVote(what) {

	 // TODO: ik denk eigenlijk dat je een stem moet kunnen cancellen, zo werkt het nu tenminste

	 let element = document.querySelector('idea-widget');
	 let root = element.shadowRoot;
	 var xmlhttp = new XMLHttpRequest();

   xmlhttp.onreadystatechange = function() {
		 if (xmlhttp.readyState == XMLHttpRequest.DONE) {
			 if (xmlhttp.status == 200) {
				 let result = xmlhttp.responseText;
				 try {
					 result = JSON.parse(result);
				 } catch(err) {
					 result = '';
				 }
				 if (result.voteRemoved) {
					 root.getElementById('idea-votes-for-button').className = root.getElementById('idea-votes-against-button').className.replace(/ ?selected/g, '');
					 root.getElementById('idea-votes-against-button').className = root.getElementById('idea-votes-against-button').className.replace(/ ?selected/g, '');
				 } else {
					 if (what == 'yes') {
						 if ( root.getElementById('idea-votes-for-button').className.search(/selected/) == -1) {
							 root.getElementById('idea-votes-for-button').className = root.getElementById('idea-votes-for-button').className + ' selected';
						 }
						 root.getElementById('idea-votes-against-button').className = root.getElementById('idea-votes-against-button').className.replace(/ ?selected/g, '');
					 } else {
						 root.getElementById('idea-votes-for-button').className = root.getElementById('idea-votes-for-button').className.replace(/ ?selected/g, '');
						 if ( root.getElementById('idea-votes-against-button').className.search(/selected/) == -1) {
							 root.getElementById('idea-votes-against-button').className = root.getElementById('idea-votes-against-button').className + ' selected';
						 }
					 }
				 }
			 } else {
				 // todo
				 alert('error');
			 }
		 }
   };

   xmlhttp.open("POST", '{{ voteUrl }}', true);
	 xmlhttp.setRequestHeader('Content-type', 'application/json');
	 xmlhttp.setRequestHeader('Accept', 'application/json');
   xmlhttp.send(JSON.stringify({
		 "opinion": what,
		 "_csrf": "{{ csrfToken }}"
	 }));

 }

</script>
