{% extends 'base.njk' %}
{% set pageTitle    = 'Bewerk argument' %}
{% set contentClass = 'argument' %}

{% block content %}
<div id="errorMessage" class="zipcode-error-container section-container side-padding-xs" style="margin-bottom: 80px;">
	<div class="col-container">
		<div class="col-5 col-sm-7 col-xs-12">
		<h1>Bewerk argument</h1>

		<form id="postcode-form" method="post" action="/arg/{{argument.id}}/edit">
			Beschrijving:<br>
			<textarea name="description" class="textarea">{{argument.description}}</textarea><br>

			<input type="hidden" name="id" value="{{argument.id}}">
			<input type="hidden" name="_method" value="PUT">
			<input type="hidden" name="_csrf" value="{{csrfToken}}">


			<div class="charsLeft margin-bottom-s">
				<div class="min">Nog minimaal <span>30</span> tekens.</div>
				<div class="max"><span>360</span> tekens resterend.</div>
			</div>

			<input type="submit" class="pull-left block btn btn-primary" value="Opslaan" />

	</form>
</div>

</div>
</div>
{% endblock %}
{% block scripts %}
<script>
	// For each argument
	// -----------------
	// Delete confirmation for arguments.


	// Helper functions
	// ----------------

	function renderForm( form ) {
		var minLen = 30;
		var maxLen = 500;

		var textarea  = form.querySelector('textarea');
		var charsLeft = form.querySelector('div.charsLeft');
		var button    = form.querySelector('input[type="submit"]');

		if( !charsLeft ) {
			return;
		}

		var msg = {
			min: charsLeft.querySelector('div.min'),
			max: charsLeft.querySelector('div.max')
		};
		var span = {
			min: msg.min.querySelector('span'),
			max: msg.max.querySelector('span')
		};

		validate();

		textarea.addEventListener('focus', function( event ) {
			charsLeft.className += ' visible touched ';
		});
		textarea.addEventListener('blur', function( event ) {
			charsLeft.className = charsLeft.className.replace(' visible', '');
		});
		textarea.addEventListener('keydown', function( event ) {
			// Prevent input when maximum is reached.
			if( textarea.value.length == maxLen ) {
				switch( event.key.toLowerCase() ) {
					case 'delete'    : case 'backspace':
					case 'arrowdown' : case 'arrowup':
					case 'arrowleft' : case 'arrowright':
						return;
					default:
						event.preventDefault();
				}
			}
		});
		textarea.addEventListener('keyup', function() {
			if( textarea.value.length > maxLen ) {
				textarea.value = textarea.value.substr(0, maxLen);
			}
			validate();
		});

		function validate() {
			updateCharsLeft();
			updateButton();
		}
		function updateCharsLeft() {
			var len     = textarea.value.length;
			var enable  = len < minLen ? 'min' : 'max';
			var disable = enable == 'max' ? 'min' : 'max';
			var chars   = len < minLen ? minLen - len : maxLen - len;

			msg[enable].className  = enable+' visible';
			msg[disable].className = disable;
			span[enable].innerHTML = chars;
		}

		function updateButton() {
			var len = textarea.value.length;
			var isValid = len >= minLen && len <= maxLen;
			 button.disabled = !isValid;
		}

	}
</script>
<script>

$('#postcode-form').forEach(function( form ) {
	renderForm(form);
});
</script>
{% endblock %}
