{% extends 'ideas.njk' %}
{% set pageTitle = 'Nieuw ontwerp insturen' if not idea.id else 'Bewerk ontwerp' %}
{% set contentClass = 'newIdea' %}
{% import 'includes/howdoesitwork.njk' as howdoesitwork %}

{% block head %}
	{{ super() }}
	<link rel="stylesheet" type="text/css" href="/lib/trix/dist/trix.css">
{% endblock %}

{% block content %}
	<h1>{{pageTitle}}</h1>

	{% if showHelp %}
	{% endif %}

	{% if showForm %}
		<div class="primary">

			<div id="image-editor">
				<img src="/img/eberhardvanderlaan2/uploaded-image-background.jpg" id="background"/>
				<form id="posterImageUpload" action="/image">
					<div class="progress"><div class="bar"></div></div>
				</form>
				<div id="image-cropper-container" class="hidden">
					<img id="image-cropper"/>
				</div>
				<message>Sleep om je ontwerp te positioneren</message>
				<div id="zoombuttons">
					<a id="zoomIn"  href="javascript: void doZoomIn();"></a>
					<a id="zoomOut" href="javascript: void doZoomOut();"></a>
				</div>
				<button id="imageEditorButton" type="button" class="hidden">Verwijder afbeelding<!-- Also set in JS --></button>
			</div>
			


			<form method="post" id="js-form">
				<div id="titleAndSummary">
					<h4>Naam</h4>
					<p>{{user.fullName}} <em>(je emailadres wordt nooit gepubliceerd)</em></p>
					
					<h2>Naam van je ontwerp</h2>
					<input type="text" name="title" value="{{idea.title}}"><br>
					
					<h2>Samenvatting</h2>
					Vertel in maximaal 140 tekens iets meer over je ontwerp.<br>
					<textarea name="summary">{{idea.summary}}</textarea>
					<div id="charsLeft">Je hebt nog <span>140</span> tekens over.</div>
				</div>
				
				<div id="description">
					<h2>Beschrijving</h2>
					Gebruik de ruimte hieronder om je voorstel verder uit te leggen.
					<ul>
						<li>Wat is het verhaal achter jouw ontwerp?</li>
						<li>Waarom is het een goede weergave voor de boodschap van burgemeester van der Laan?</li>
						<li>Draag argumenten aan om je buurtgenoten te overtuigen op jouw voorstel te stemmen.</li>
					</ul>
					{% if useModernEditor %}
						<input type="hidden" id="js-description" name="description" value="{{idea.description}}">
						
						<trix-toolbar id="trixToolbar">
							<div class="button_row">
								<span class="button_group text_tools">
									<button type="button" class="icon heading-1" data-trix-attribute="heading1" title="Titel">Heading</button>
									<button type="button" class="icon bold" data-trix-attribute="bold" data-trix-key="b" title="Vetgedrukt">Bold</button>
									<button type="button" class="icon italic" data-trix-attribute="italic" data-trix-key="i" title="Cursief">Italic</button>
									{# <button type="button" class="icon strike" data-trix-attribute="strike" title="Doorstrepen">Strikethrough</button> #}
									<button type="button" class="icon link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="Link">Link</button>
								</span>

								<span class="button_group text_tools">
									{# <button type="button" class="icon quote" data-trix-attribute="quote" title="Quote">Quote</button>
									<button type="button" class="icon code" data-trix-attribute="code" title="Code">Code</button> #}
									<button type="button" class="icon list bullets" data-trix-attribute="bullet" title="Opsomming">Bullets</button>
									<button type="button" class="icon list numbers" data-trix-attribute="number" title="Genummerde lijst">Numbers</button>
									<button type="button" class="icon nesting-level decrease" data-trix-action="decreaseNestingLevel" title="Inspringen vergroten" disabled="">Decrease Level</button>
									<button type="button" class="icon nesting-level increase" data-trix-action="increaseNestingLevel" title="Inspringen verkleinen" disabled="">Increase Level</button>
									<button type="button" class="icon attach" data-trix-action="x-attach" tabindex="-1" title="Afbeelding toevoegen">Attach Files</button>
									{# <button type="button" class="icon camera" data-trix-action="x-camera" tabindex="-1">Camera</button> #}
								</span>

								{# <span class="button_group history_tools">
								<button type="button" class="icon undo" data-trix-action="undo" data-trix-key="z" title="Undo" disabled="">Undo</button>
								<button type="button" class="icon redo" data-trix-action="redo" data-trix-key="shift+z" title="Redo" disabled="">Redo</button>
								</span> #}
							</div>

							<div class="dialogs">
								<div class="dialog link_dialog" data-trix-attribute="href" data-trix-dialog="href">
									<div class="link_url_fields">
										<input type="url" required="" name="href" placeholder="Enter a URL…">
										<div class="button_group">
											<input type="button" value="Link" data-trix-method="setAttribute">
											<input type="button" value="Unlink" data-trix-method="removeAttribute">
										</div>
									</div>
								</div>
							</div>
						</trix-toolbar>
						<trix-editor id="js-editor" class="userContentEditor" input="js-description" toolbar="trixToolbar"></trix-editor><br>
					{% else %}
						<textarea name="description">{{idea.description}}</textarea>
					{% endif %}
					<div id="charsLeftMain">Nog minimaal <span>140</span> tekens.</div><br/><br/>
					
					
					{% if idea.id %}
						<input type="hidden" name="id" value="{{idea.id}}">
						<input type="hidden" name="_method" value="PUT">
					{% endif %}
					<input type="hidden" name="_csrf" value="{{csrfToken}}">
				</div>
				
				{% if idea.posterImage %}
					<input type="hidden" id="images" name="images[]" value="{{idea.posterImage.key}}">
					<input type="hidden" id="imageExtraData" name="imageExtraData" value="{{idea.posterImage.extraData | dump}}">
				{% else %}
					<input type="hidden" id="imageExtraData" name="imageExtraData">
				{% endif %}
				
				<input type="submit" value="Plan opslaan">
			</form>
		</div>

		<div class="secondary">
			<div class="pageContent">
				<div class="speechBubble">
					“Zorg goed voor onze stad en voor elkaar.”
					<div class="small">
						Vaarwel,<br/><br/><br/><br/><br/>
						Eberhard van der Laan
					</div>
				</div>
			</div>

			{% include "includes/ontwerp-richtlijnen.html" ignore missing %}

		</div>
	{% endif %}
{% endblock %}

{% block howDoesItWork %}
	{% if not user.isLoggedIn() %}
		{{howdoesitwork.howblock('open')}}
		<a href="/account/register?ref=/idea/nieuw" class="meldjeaanknop">Meld je aan om een ontwerp in te sturen</a>
	{% endif %}
{% endblock %}

{% block scripts %}
	{% if showForm %}
		<script src="/lib/dropzone/dist/dropzone.js"></script>
		<script src="/lib/trix/dist/trix.js"></script>
		<script src="/js/editor.js"></script>
		
		<script>
		 // Idea form extensions
		 // --------------------
						// Used by poster file upload and description editor to register
		 // a reference to each uploaded file. This reference list is used
		 // by the server to connect the correct image uploads to this idea.
			 var form = document.getElementById('js-form');
		 form.addAttachmentRef = function( key ) {
			 var input   = document.createElement('input');
			 input.type  = 'hidden';
			 input.name  = 'images[]';
			 input.value = key;
			 this.appendChild(input);
		 };
		 form.clearAttachmentRef = function() {
			 var images = Array.prototype.slice.call(
				 form.querySelectorAll('input[name="images[]"]'), 0
			 );
			 images.forEach(function( image ) {
				 this.removeChild(image);
			 }, this);
		 };
		 form.addEventListener('submit', function( event ) {
			 var uploadForm = document.getElementById('posterImageUpload');
			 if( !uploadForm ) return;
			 
			 if( uploadForm.classList.contains('uploading') ) {
				 event.stopPropagation();
				 event.preventDefault();
				 alert(
					 'De afbeelding upload is nog niet afgerond.\n\n'+
					 'Hierdoor kan uw idee nog niet opgeslagen worden.'
				 );
			 }
		 });

		 var currentImage;
		 var form        = document.getElementById('js-form');
		 var imageEditor = document.getElementById('image-editor');
		 var el          = document.getElementById('posterImageUpload');
		 var button      = imageEditor.querySelector('button');
		 var background = imageEditor.querySelector('#background');
		 var zoombuttons = imageEditor.querySelector('#zoombuttons');
		 var message      = imageEditor.querySelector('message');
		 var progressBar = el.querySelector('#posterImageUpload .progress .bar');
		 var cropperStatus = {};

		 var cropperWidth = 500;
		 var cropperHeight = 200;

		 var cropperContainer = document.getElementById('image-cropper-container');
		 var cropper = document.getElementById('image-cropper');

		 button.addEventListener('click', function() {
			 removeCropper();
			 upload.removeFile(currentImage || {});
		 });

		 var upload = new Dropzone(el, {
			 maxFiles             : 1,
			 uploadMultiple       : false,
			 
			 maxFilesize          : 10,
			 maxThumbnailFilesize : 10,
			 thumbnailWidth       : 1800,
			 thumbnailHeight      : null,

			 init: function(x) {
				 let imageElem = document.getElementById('images')
				 if (imageElem) {
					 cropper.setAttribute('src', '/image/' + imageElem.value);
					 initCropper()
				 }
			 },
			 
			 addedfile: function( file ) {

				 this.removeFile(currentImage || {});
				 currentImage = file;
				 
				 el.classList.add('uploading');
				 progressBar.style.width = 0;
				 
				 file.key = Date.now()+'-'+file.name;
				 this.options.params['key'] = file.key;
			 },

			 removedfile: function( file ) {
				 el.removeAttribute('style');
				 el.classList.remove('uploading');
				 form.clearAttachmentRef();
			 },
			 
			 thumbnail: function( file, dataURL ) {
				 el.setAttribute('style', 'background-image: url('+dataURL+')');
				 cropper.setAttribute('src', dataURL);
			 },

			 sending: function() {
				 button.innerHTML = 'Annuleer upload';
			 },

			 uploadprogress: function( file, progress, bytesSent ) {
				 progressBar.style.width = progress+'%';
			 },
			 
			 success: function( file ) {
				 el.classList.remove('uploading');
				 form.addAttachmentRef(file.key);
				 button.innerHTML = 'Verwijder afbeelding';
				 initCropper(file);
			 },

			 error: function( file, error ) {
				 button.innerHTML = 'Verwijder afbeelding';
				 this.removeFile(file);
				 if( typeof error != 'string' ) {
					 alert(error.message);
				 }
			 },

		 });

		 function initCropper(file) {

			 el.style.display = 'none';
			 button.style.display = 'block';
			 background.style.display = 'block';
			 zoombuttons.style.display = 'block';
			 message.style.display = 'block';

			 // dit doet de css nu
			 // cropperContainer.style.width  = cropperWidth  + 'px';
			 // cropperContainer.style.height = cropperHeight + 'px';
			 // cropperContainer.style.left   = parseInt( ( cropperContainer.parentNode.offsetWidth  - cropperWidth  ) / 2 ) + 'px';
			 // cropperContainer.style.top    = parseInt( ( cropperContainer.parentNode.offsetHeight - cropperHeight ) / 2 ) + 'px';

			 if (document.getElementById('imageExtraData').value) {
				 cropperStatus = JSON.parse(document.getElementById('imageExtraData').value)
				 console.log(cropperStatus);
			 } else {

				 var width = file.width;
				 var height = file.height;

				 var newWidth, newHeight, newX, newY;
				 if (cropperWidth/cropperHeight > width/height) {
					 newWidth = cropperWidth;
					 newHeight = parseInt((cropperWidth/width) * height);
					 newX = 0;
					 newY = ( cropperHeight - newHeight ) / 2;
				 } else {
					 newHeight = cropperHeight;
					 newWidth = parseInt((cropperHeight/height) * width);
					 newX = ( cropperWidth - newWidth ) / 2;
					 newY = 0;
				 }

				 cropperStatus.orgWidth  = width;
				 cropperStatus.orgHeight = height;

				 cropperStatus.width  = newWidth;
				 cropperStatus.height = newHeight;
				 cropperStatus.top    = newY;
				 cropperStatus.left   = newX;

				 cropperStatus.zoom = parseInt( 1000 * cropperStatus.width / cropperStatus.orgWidth );

			 }

			 cropper.style.width  = cropperStatus.width + 'px';
			 cropper.style.height = cropperStatus.height + 'px';
			 cropper.style.top    = cropperStatus.top + 'px';
			 cropper.style.left   = cropperStatus.left + 'px';

			 cropper.addEventListener('mousedown', initDrag);

			 cropperContainer.className = '';

			 updateExtraDataFormField()

		 }

		 function removeCropper() {
			 el.style.display = 'block';
			 button.style.display = 'none';
			 background.style.display = 'none';
			 zoombuttons.style.display = 'none';
			 message.style.display = 'none';
			 cropperContainer.className = 'hidden';
		 }

		 function initDrag(event) {

			 event.preventDefault();

			 cropperStatus.event = {};
			 cropperStatus.event.lastX = event.clientX;
			 cropperStatus.event.lastY = event.clientY;

			 document.onmouseup		 = endDrag;
			 document.onmousemove	 = doDrag;

			 return false;

		 }

		 function doDrag(event) {

			 event.preventDefault();

			 var diffX = event.clientX - cropperStatus.event.lastX;
			 var diffY = event.clientY - cropperStatus.event.lastY;

			 cropperStatus.event.lastX = event.clientX;
			 cropperStatus.event.lastY = event.clientY;

			 moveImage(diffX, diffY);

			 return false;

		 }

		 function endDrag(event) {

			 event.preventDefault();

			 cropperStatus.event = {};

			 document.onmouseup		 = null;
			 document.onmousemove	 = null;

			 return false;

		 }

		 function doZoomIn() {

			 var newZoom = parseInt( cropperStatus.zoom * 1.1 );

			 var newWidth  = cropperStatus.orgWidth  * ( newZoom / 1000 );
			 var newHeight = cropperStatus.orgHeight * ( newZoom / 1000 );

			 cropperStatus.zoom = newZoom;

			 drawZoom(newWidth, newHeight);

		 }

		 function doZoomOut() {

			 var newZoom = parseInt( cropperStatus.zoom / 1.1 );

			 var newWidth  = cropperStatus.orgWidth  * ( newZoom / 1000 );
			 var newHeight = cropperStatus.orgHeight * ( newZoom / 1000 );

			 if (newWidth < cropperWidth) {
				 newZoom = parseInt( 1000 * cropperWidth / cropperStatus.orgWidth );
				 newWidth  = cropperStatus.orgWidth  * ( newZoom / 1000 );
				 newHeight = cropperStatus.orgHeight * ( newZoom / 1000 );
			 }

			 if (newHeight < cropperHeight) {
				 newZoom = parseInt( 1000 * cropperHeight / cropperStatus.orgHeight );
				 newWidth  = cropperStatus.orgWidth  * ( newZoom / 1000 );
				 newHeight = cropperStatus.orgHeight * ( newZoom / 1000 );
			 }

			 cropperStatus.zoom = newZoom;

			 drawZoom(newWidth, newHeight);

		 }

		 function drawZoom(newWidth, newHeight) {

			 var diffX = ( cropperStatus.width - newWidth ) / 2;
			 var diffY = ( cropperStatus.height - newHeight ) / 2;

			 cropperStatus.width  = newWidth;
			 cropperStatus.height = newHeight;

			 cropper.style.width  = cropperStatus.width  + 'px';
			 cropper.style.height = cropperStatus.height + 'px';

			 moveImage(diffX, diffY);
			 
		 }

		 function moveImage(diffX, diffY) {

			 var newTop = cropperStatus.top + diffY;
			 if (newTop > 0) newTop = 0;
			 if (newTop + cropperStatus.height < cropperHeight) newTop = cropperHeight - cropperStatus.height;

			 var newLeft = cropperStatus.left + diffX;
			 if (newLeft > 0) newLeft = 0;
			 if (newLeft + cropperStatus.width < cropperWidth) newLeft = cropperWidth - cropperStatus.width;

			 cropperStatus.top  = newTop;
			 cropperStatus.left = newLeft;

			 cropper.style.top  = cropperStatus.top  + 'px';
			 cropper.style.left = cropperStatus.left + 'px';

			 updateExtraDataFormField();
			 
		 }

		 function updateExtraDataFormField() {
			 document.getElementById('imageExtraData').value = JSON.stringify(cropperStatus);
		 }
		</script>

		<script>
		 // Summary
		 // -------
						var maxLen    = 140;
		 var textarea  = document.querySelector('textarea[name="summary"]');
		 var charsLeft = document.querySelector('#charsLeft span');
		 
		 updateCharsLeft();
		 textarea.addEventListener('keydown', function( event ) {
			 var len = textarea.value.length;
			 var key = event.key.toLowerCase();
			 
			 // Prevent input when maximum is reached.
				 if( len == maxLen ) {
					 switch( key ) {
						 case 'delete': case 'backspace':
						 case 'arrowdown': case 'arrowup':
						 case 'arrowleft': case 'arrowright':
							 return;
						 default:
							 event.preventDefault();
					 }
				 }
		 });
		 textarea.addEventListener('keyup', updateCharsLeft);
		 
		 function updateCharsLeft() {
			 charsLeft.innerHTML = maxLen - textarea.value.length;
			 if (maxLen >= textarea.value.length) {
				 charsLeft.style.color = '#9A9A9A';
			 } else {
				 charsLeft.style.color = 'red';
			 }
		 }
		</script>
		
		<script>
		 // Main editor
		 // -----------
						var minLen = 140;
		 var charsLeftMain = document.querySelector('#charsLeftMain span');

		 {% if useModernEditor %}
		 initAttachmentManager(
			 document.getElementById('js-form'),
			 document.getElementById('js-editor').editor
		 );
		 var mainEditor  = document.getElementById('js-editor');
		 document.querySelector('#charsLeftMain').style.marginTop = '-20px';
		 {% else %}
		 var mainEditor  = document.querySelector('textarea[name="description"]');
		 {% endif %}
		 mainEditor.addEventListener('keyup', updateCharsLeftMain);

		 function updateCharsLeftMain() {
			 {% if useModernEditor %}
			 let length = minLen - mainEditor.innerHTML.length
			 {% else %}
			 let length = minLen - mainEditor.value.length
			 {% endif %}
			 if (length <= 0) {
				 document.querySelector('#charsLeftMain').style.display = 'none';
			 } else {
				 document.querySelector('#charsLeftMain').style.display = 'block';
				 document.querySelector('#charsLeftMain span').innerHTML = length;
			 }
		 }
		 
		 updateCharsLeftMain();

		</script>


	{% endif %}
{% endblock %}
