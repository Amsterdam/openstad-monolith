{% macro list( user, idea, csrfToken, propName ) %}
	{% set arguments     = idea[propName] %}
	{% set isFor         = propName == 'argumentsFor' %}
	
	{% set mayShowForm   = user.can('arg:form', idea) %}
	{% set mayAddArg     = user.can('arg:add', idea) %}
	{% set mayEmailUsers = user.can('user:mail') %}
	
	{% if mayShowForm %}
		<form method="POST" action="/plan/{{idea.id}}/arg/new" class="newArgument">
			<textarea
			name="description"
			placeholder="{{'Ik ben voor, want...' if isFor else 'Ik ben tegen, want...'}}"
			style="font-size: inherit;"
			{{'data-disabled readonly' if not mayAddArg}}
			></textarea>
			
			<div class="charsLeft">
				<div class="min">Nog minimaal <span>30</span> tekens.</div>
				<div class="max"><span>360</span> tekens resterend.</div>
			</div>
			
			<input type="hidden" name="_csrf" value="{{csrfToken}}">
			<input type="hidden" name="sentiment" value="{{'for' if isFor else 'against'}}">
			<input type="submit" value="Verzenden">
		</form>
	{% else %}
		<h2>{{'Ik ben voor, want...' if isFor else 'Ik ben tegen, want...'}}</h2>
	{% endif %}

	{% if propName == 'argumentsFor' %}
		<h2>Argumenten voor</h2>
	{% else %}
		<h2>Argumenten tegen</h2>
	{% endif %}

	{% for arg in arguments %}
		{% set mayEdit         = user.can('arg:edit', idea, arg) %}
		{% set mayDelete       = user.can('arg:delete', idea, arg) %}
		{% set maySeeReplyForm = user.can('arg:reply:form', idea, arg) %}
		{% set mayReply        = user.can('arg:reply', idea, arg) %}

		<div class="argument" data-id="{{arg.id}}" id="arg{{arg.id}}">
			<div class="user {{'admin' if arg.user.isAdmin()}}">
				<strong>
					{% if mayEmailUsers %}
						<a href="mailto:{{arg.user.email}}">{{arg.user.fullName}}</a>
					{% else %}
						{{arg.user.fullName}}
					{% endif %}
				</strong>
				| {{arg.createdAt | date('LLL')}}
				
				{% if mayEdit or mayDelete %}
					<div class="hamburger" onclick="this.className = this.className + ' active'">
						{% if mayEdit %}
							<form class="action" method="GET" action="/plan/{{arg.ideaId}}/arg/{{arg.id}}/edit">
								<input type="submit" class="default edit" value="bewerken" title="Argument bewerken">
							</form>
						{% endif %}
						{% if mayDelete %}
							<form class="action delete" method="POST" action="/plan/{{arg.ideaId}}/arg/{{arg.id}}/delete">
								<input type="hidden" name="_method" value="DELETE">
								<input type="hidden" name="_csrf" value="{{csrfToken}}">
								<input type="submit" class="default delete" value="verwijderen" title="Argument verwijderen">
							</form>
						{% endif %}
					</div>
				{% endif %}

			</div>
			
			<p>{{arg.description | urlize | nl2br | safe}}</p>
			
			<form class="action vote" method="POST" action="/plan/{{idea.id}}/arg/{{arg.id}}/vote">
				<input type="hidden" name="_csrf" value="{{csrfToken}}">
				<button type="submit" name="opinion" value="yes" class="{{'voted' if arg.hasUserVoted else 'notvoted'}}">
					Mee eens (<span>{{arg.yes}}</span>)
				</button>
			</form>
			
			{% if maySeeReplyForm %}
				<a href="/plan/{{arg.ideaId}}/arg/{{arg.id}}/reply"
				class="reply" {{'data-disabled' if not mayReply}}
				>Reageren</a>
			{% endif %}
		</div>
		
		{% for reaction in arg.reactions %}
			{% set mayEdit   = user.can('arg:edit', idea, reaction) %}
			{% set mayDelete = user.can('arg:delete', idea, reaction) %}
			
			<div class="reaction" id="arg{{reaction.id}}">
				<div class="user {{'admin' if reaction.user.isAdmin()}}">
					<strong>
						{% if mayEmailUsers %}
							<a href="mailto:{{reaction.user.email}}">{{reaction.user.fullName}}</a>
						{% else %}
							{{reaction.user.fullName}}
						{% endif %}
					</strong>
					| {{reaction.createdAt | date('LLL')}}

					{% if mayEdit or mayDelete %}
						<div class="hamburger" onclick="this.className = this.className + ' active'">
							{% if mayEdit %}
								<form class="action" method="GET" action="/plan/{{reaction.ideaId}}/arg/{{reaction.id}}/edit">
									<input type="submit" class="default edit" value="bewerken" title="Reactie bewerken">
								</form>
							{% endif %}
							{% if mayDelete %}
								<form class="action delete" method="POST" action="/plan/{{reaction.ideaId}}/arg/{{reaction.id}}/delete" data-is-reaction="true">
									<input type="hidden" name="_method" value="DELETE">
									<input type="hidden" name="_csrf" value="{{csrfToken}}">
									<input type="submit" class="default delete" value="verwijderen" title="Reactie verwijderen">
								</form>
							{% endif %}
						</div>
					{% endif %}
				</div>
				
				<p>{{reaction.description | urlize | safe}}</p>
			</div>
		{% endfor %}
				{% else %}
		<div class="noArguments" style="margin-top: -2px;">
			{% if mayAddArg %}
				Heb je een goed argument {{'voor' if isFor else 'tegen'}}?
				Laat je stem horen!
			{% else %}
				Nog geen argumenten {{'voor' if isFor else 'tegen'}}.
			{% endif %}
		</div>
	{% endfor %}
	
	{# Javascript below picks this up, and `insertBefore`s this when/where it's relevant #}
	<form method="POST" action="/plan/{{idea.id}}/arg/reply" class="tpl newReaction">
		<textarea name="description" rows="1" placeholder="Typ hier jouw reactie..." style="font-size: inherit;"></textarea>
		
		<div class="charsLeft">
			<div class="min">Nog minimaal <span>140</span> tekens.</div>
			<div class="max"><span>360</span> tekens resterend.</div>
		</div>
		
		<input type="hidden" name="_csrf" value="{{csrfToken}}">
		<input type="hidden" name="parentId" value="">
		<input type="hidden" name="sentiment" value="{{'for' if isFor else 'against'}}">
		<input type="submit" value="Verzenden">
	</form>
{% endmacro %}

{% macro renderLists( user, idea, cssQuery ) %}
	<script>
	 // New argument form
	 // -----------------
	 // Go to login/register page when user clicks textarea, and is not logged in.
	 $('{{cssQuery}} form:first-child textarea[data-disabled]').forEach(function( textarea ) {
		 textarea.addEventListener('focus', function( event ) {
			 textarea.blur();
			 document.location.href = '/plan/{{idea.id}}/arg/new';
		 });
	 });
	 // Character count on 'new argument' forms.
	 $('{{cssQuery}} form:first-child').forEach(function( form, i ) {
		 renderForm(form);
	 });
	 
	 // For each argument
	 // -----------------
	 // Delete confirmation for arguments.
	 $('{{cssQuery}} form.delete').forEach(function( form ) {
		 form.addEventListener('submit', function( event ) {
			 var msg = 'Let op! Je staat op het punt je ' + ( form.dataset.isReaction ?  'reactie' : 'argument' ) + ' te verwijderen. '+
			           'Dit kan niet ongedaan gemaakt worden.\n\n'+
			           'Weet je het zeker?';
			 if( !confirm(msg) ) {
				 event.preventDefault();
			 }
		 });
	 });
	 // Make argument vote buttons dynamic.
	 $('{{cssQuery}} form.vote').forEach(function( form ) {
		 var countBox = form.querySelector('button span');
		 var button   = countBox.parentNode;
		 
		 form.addEventListener('submit', function( event ) {
			 var method = form.method;
			 var url    = form.action;
			 var timer  = window.setTimeout(function() {button.disabled = true}, 500);
			 
			 send(method, url, {
				 opinion: 'yes'
			 })
				 .then(function( data ) {
					 var hasUserVoted   = data.argument.hasUserVoted;
					 var voteCount      = data.argument.yes;
					 countBox.innerHTML = voteCount;
					 button.className   = button.className.replace(/ ?voted|$/, hasUserVoted ? ' voted' : '');
					 button.disabled    = false;
					 window.clearTimeout(timer);
				 })
				 .catch(function( errorJSON ) {
					 window.clearTimeout(timer);
					 alert(errorJSON.message);
				 });
			 
			 event.preventDefault();
		 });
	 });
	 // Prepare 'reply' buttons to show a reaction form when it's clicked.
	 $('{{cssQuery}}').forEach(function( argList ) {
		 // Pull out general reply form for use as a template.
			 var tpl = argList.querySelector('.newReaction');
		 tpl.parentNode.removeChild(tpl);
		 // Remove `tpl` class as it hides the element.
			 tpl.className = tpl.className.replace(/\s*tpl\s*/, '');
		 
		 // Render reply buttons.
			 $(argList, '.argument').forEach(function( arg ) {
				 var replyButtons = $(arg, 'a.reply');
				 replyButtons.forEach(function( replyButton ) {
					 replyButton.href = '';
					 replyButton.addEventListener('click', function( event ) {
						 event.preventDefault();
						 if( !replyButton.hasAttribute('data-disabled') ) {
							 openReplyForm(tpl, arg);
						 } else {
							 alert('Je moet ingelogd zijn om te kunnen reageren');
						 }
					 });
				 });
			 });
	 });
	 
	 // Helper functions
	 // ----------------
	 
	 function openReplyForm( tpl, arg ) {
		 var argList = arg.parentNode;
		 var nextArg = arg;
		 while(
			 (nextArg = nextArg.nextElementSibling) &&
			 nextArg.className != 'argument'
		 );
		 
		 var form;
		 if( !arg.$replyForm ) {
			 form = tpl.cloneNode(true);
			 renderReplyForm(form, arg.getAttribute('data-id'));
			 arg.$replyForm = form;
			 argList.insertBefore(form, nextArg);
		 } else {
			 form = arg.$replyForm;
		 }
		 
		 var desc = form.querySelector('textarea');
		 desc.addEventListener('blur', function() {
			 // Close reply form
			 if( !desc.value.length ) {
				 form.parentNode.removeChild(form);
				 arg.$replyForm = null;
			 }
		 });
		 
		 desc.focus();
	 }
	 
	 function renderReplyForm( form, parentArgId ) {
		 var desc     = form.querySelector('textarea');
		 var pidField = form.querySelector('input[name="parentId"]');
		 var last     = 0;
		 var resize   = function() {
			 // Throttle...
				 var now = Date.now();
			 if( now - last < 100 ) return;
			 last = now;
			 
			 desc.style.height = 'auto';
			 desc.style.height = (desc.scrollHeight - 10) + 'px';
		 };
		 
		 pidField.value = Number(parentArgId);
		 renderForm(form);
		 
		 desc.addEventListener('input', resize);
		 window.addEventListener('resize', resize);
	 }
	 
	 function renderForm( form ) {
		 var minLen = 30;
		 var maxLen = 500;
		 
		 var textarea  = form.querySelector('textarea');
		 var charsLeft = form.querySelector('div.charsLeft');
		 var button    = form.querySelector('input[type="submit"]');
		 
		 if( !charsLeft ) {
			 return;
		 }
		 
		 var msg = {
			 min: charsLeft.querySelector('div.min'),
			 max: charsLeft.querySelector('div.max')
		 };
		 var span = {
			 min: msg.min.querySelector('span'),
			 max: msg.max.querySelector('span')
		 };
		 
		 validate();
		 
		 textarea.addEventListener('focus', function( event ) {
			 charsLeft.className += ' visible';
		 });
		 textarea.addEventListener('blur', function( event ) {
			 charsLeft.className = charsLeft.className.replace(' visible', '');
		 });
		 textarea.addEventListener('keydown', function( event ) {
			 // Prevent input when maximum is reached.
				 if( textarea.value.length == maxLen ) {
					 switch( event.key.toLowerCase() ) {
						 case 'delete'    : case 'backspace':
						 case 'arrowdown' : case 'arrowup':
						 case 'arrowleft' : case 'arrowright':
							 return;
						 default:
							 event.preventDefault();
					 }
				 }
		 });
		 textarea.addEventListener('keyup', function() {
			 if( textarea.value.length > maxLen ) {
				 textarea.value = textarea.value.substr(0, maxLen);
			 }
			 validate();
		 });
		 
		 function validate() {
			 updateCharsLeft();
			 updateButton();
		 }
		 function updateCharsLeft() {
			 var len     = textarea.value.length;
			 var enable  = len < minLen ? 'min' : 'max';
			 var disable = enable == 'max' ? 'min' : 'max';
			 var chars   = len < minLen ?
			               minLen - len :
			               maxLen - len;
			 
			 msg[enable].className  = enable+' visible';
			 msg[disable].className = disable;
			 span[enable].innerHTML = chars;
		 }
		 function updateButton() {
			 var len = textarea.value.length;
			 var isValid = len >= minLen && len <= maxLen;
			 button.disabled = !isValid;
		 }
	 }
	</script>
{% endmacro %}
